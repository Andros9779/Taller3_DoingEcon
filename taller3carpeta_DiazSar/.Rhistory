# Cargar librerías necesarias
library(haven)
library(dplyr)
library(tidyr)
# Leer las bases de datos
data1 <- read_dta("data/raw/data1_1067956690.dta")
library(haven)
data1_1067956690 <- read_dta("~/Downloads/taller2carpeta_apellido/data/raw/data1_1067956690.dta")
View(data1_1067956690)
library(haven)
data2_1067956690 <- read_dta("~/Downloads/taller2carpeta_apellido/data/raw/data2_1067956690.dta")
View(data2_1067956690)
# Cargar librerías necesarias
library(haven)
library(dplyr)
library(tidyr)
# Leer las bases de datos
data1 <- read_dta("data/raw/data1_1067956690.dta")
# Guardar la base de datos resultante en 'data/derived'
write.csv(data_final, "data/derived/basedatos_examen.csv", row.names = FALSE)
# Convertir la base a formato largo (si fuera necesario, dependiendo de cómo vienen los datos)
# Supongamos que ya están en formato largo, de lo contrario:
data_long <- pivot_longer(data_combined, cols = starts_with("sales"), names_to = "vt", values_to = "sales")
library(haven)
library(dplyr)
library(tidyr)
# Leer las bases de datos
data1 <- read_dta("data/raw/data1_1067956690.dta")
# Cargar librerías necesarias
library(haven)
library(dplyr)
library(tidyr)
setwd("/Users/jdds/Downloads/taller2carpeta_apellido")
# Leer las bases de datos
data1 <- read_dta("data/raw/data1_1067956690.dta")
data2 <- read_dta("data/raw/data2_1067956690.dta")
# Combinar las dos bases (suponiendo que tienen las mismas columnas)
data_combined <- bind_rows(data1, data2)
# Convertir la base a formato largo (si fuera necesario, dependiendo de cómo vienen los datos)
# Supongamos que ya están en formato largo, de lo contrario:
data_long <- pivot_longer(data_combined, cols = starts_with("sales"), names_to = "vt", values_to = "sales")
library(haven)
library(dplyr)
library(tidyr)
# Establece el directorio de trabajo al nivel del proyecto (ajusta la ruta según corresponda)
setwd("/Users/jdds/Downloads/taller2carpeta_apellido")
# 1. Leer los archivos de datos desde la carpeta "data/raw"
data1 <- read_dta("data/raw/data1_1067956690.dta")
data2 <- read_dta("data/raw/data2_1067956690.dta")
# Aseguramos que los nombres de las columnas sean únicos (en caso de duplicados)
names(data1) <- make.unique(names(data1))
names(data2) <- make.unique(names(data2))
# 2. Convertir cada base de formato ancho a largo
# Suponemos que las columnas siguen el patrón: <nombre><año>
# Por ejemplo: sales2018, sales2019, ..., turismo2018, turismo2019, ...
# Para data1: extraemos las variables 'sales' y 'turismo'
data1_long <- data1 %>%
pivot_longer(
cols = -vi,                              # Todas menos el identificador
names_to = c(".value", "vt"),             # Separamos el nombre base y el año
names_pattern = "([A-Za-z]+)([0-9]+)",      # Ej: "sales2018" -> "sales" y "2018"
names_repair = "unique"                    # Para evitar problemas de nombres duplicados
)
rlang::last_trace()
# Aseguramos que los nombres de las columnas sean únicos (en caso de duplicados)
names(data1) <- make.unique(names(data1))
names(data2) <- make.unique(names(data2))
library(haven)
library(dplyr)
# Ajusta el directorio de trabajo si fuera necesario
setwd("/Users/jdds/Downloads/taller2carpeta_apellido")
# 1. Leer las bases
data1 <- read_dta("data/raw/data1_1067956690.dta")
data2 <- read_dta("data/raw/data2_1067956690.dta")
# 2. Combinar las dos bases por filas, ya que ambas tienen la misma estructura
data_combined <- bind_rows(data1, data2)
# 3. Crear la variable 'lockdown' (1 para años 2020 y 2021, 0 para 2018 y 2019)
data_final <- data_combined %>%
mutate(lockdown = if_else(vt %in% c(2020, 2021), 1, 0))
# 4. Guardar el resultado en la carpeta "data/derived"
write.csv(data_final, "data/derived/basedatos_examen.csv", row.names = FALSE)
View(data_combined)
View(data_final)
library(haven)
library(dplyr)
# Ajusta el directorio de trabajo si fuera necesario
setwd("/Users/jdds/Downloads/taller2carpeta_apellido")
# 1. Leer las bases
data1 <- read_dta("data/raw/data1_1067956690.dta")
data2 <- read_dta("data/raw/data2_1067956690.dta")
# 2. Combinar las dos bases por filas, ya que ambas tienen la misma estructura
data_final <- full_join(data1, data2, by = c("vi", "vt")) %>%
mutate(lockdown = if_else(vt %in% c(2020, 2021), 1, 0))
# 3. Crear la variable 'lockdown' (1 para años 2020 y 2021, 0 para 2018 y 2019)
data_final <- data_combined %>%
mutate(lockdown = if_else(vt %in% c(2020, 2021), 1, 0))
# 4. Guardar el resultado en la carpeta "data/derived"
write.csv(data_final, "data/derived/basedatos_examen.csv", row.names = FALSE)
source("~/.active-rstudio-document", echo=TRUE)
View(data_final)
# Cargar librerías necesarias
library(haven)   # Para leer archivos Stata (.dta)
library(dplyr)   # Para manipulación de datos
# Establece el directorio de trabajo si fuese necesario
# setwd("/Users/jdds/Downloads/taller2carpeta_apellido")
# 1. Leer las bases desde "data/raw"
data1 <- read_dta("data/raw/data1_1067956690.dta")
data2 <- read_dta("data/raw/data2_1067956690.dta")
# 2. Unir las bases por "vi" y "vt" (full_join unirá todas las filas que estén en una u otra base)
data_final <- full_join(data1, data2, by = c("vi", "vt")) %>%
# 3. Crear la variable "lockdown" (1 para 2020 y 2021, 0 para 2018 y 2019)
mutate(lockdown = if_else(vt %in% c(2020, 2021), 1, 0))
# 4. Guardar el resultado en la carpeta "data/derived"
write.csv(data_final, "data/derived/basedatos_examen.csv", row.names = FALSE)
# Cargar librerías necesarias
library(dplyr)
library(ggplot2)
library(readr)
# --- OPCIÓN 1: Leer la base ya guardada en CSV (si ya la generaste) ---
data_final <- read_csv("data/derived/basedatos_examen.csv")
# --- OPCIÓN 2: Si ya tienes 'data_final' en memoria, omite la lectura ---
# data_final <- tu_data_final
# Asegurarse que las variables estén en el tipo correcto
data_final <- data_final %>%
mutate(
vt = as.numeric(vt),
lockdown = as.factor(lockdown),    # Convertimos lockdown a factor para graficar categorías
turism = as.factor(turism)           # Si turism es numérico, se puede tratar como factor para distinguir grupos
)
# 1. Resumen estadístico de las ventas por periodo (lockdown)
data_summary <- data_final %>%
group_by(lockdown) %>%
summarise(
count = n(),
mean_sales = mean(sales, na.rm = TRUE),
sd_sales   = sd(sales, na.rm = TRUE),
min_sales  = min(sales, na.rm = TRUE),
max_sales  = max(sales, na.rm = TRUE)
)
print(data_summary)
# 2. Boxplot: Comparación de ventas antes y durante la pandemia
plot_box <- ggplot(data_final, aes(x = lockdown, y = sales)) +
geom_boxplot(fill = "lightblue", outlier.color = "red") +
labs(
title = "Comparación de Ventas Antes y Durante la Pandemia",
x = "Lockdown (0 = Pre, 1 = Post)",
y = "Ventas (millones de pesos)"
) +
theme_minimal()
# Mostrar boxplot
print(plot_box)
# 3. Gráfico de líneas: Evolución promedio de ventas por año
annual_sales <- data_final %>%
group_by(vt) %>%
summarise(mean_sales = mean(sales, na.rm = TRUE))
plot_line <- ggplot(annual_sales, aes(x = vt, y = mean_sales)) +
geom_line(color = "blue", size = 1) +
geom_point(color = "red", size = 2) +
labs(
title = "Evolución Promedio de Ventas por Año",
x = "Año",
y = "Ventas promedio (millones de pesos)"
) +
theme_minimal()
# Mostrar gráfico de líneas
print(plot_line)
# 4. Boxplot diferenciado por dependencia de turismo
plot_box_turism <- ggplot(data_final, aes(x = lockdown, y = sales, fill = turism)) +
geom_boxplot(position = position_dodge(width = 0.8)) +
labs(
title = "Ventas Antes vs. Después de la Pandemia por Dependencia de Turismo",
x = "Lockdown (0 = Pre, 1 = Post)",
y = "Ventas (millones de pesos)",
fill = "Turism"
) +
theme_minimal()
# Mostrar boxplot diferenciado
print(plot_box_turism)
source("~/Downloads/taller2carpeta_apellido/code/Visualizacion_datos.R")
View(plot_box)
View(plot_box_turism)
View(plot_line)
